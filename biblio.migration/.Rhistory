aff_data = estimated_affiliations,
person_var = 'cluster_id',
time_var = 'pub_year',
geo_var = 'country_iso_alpha3_code',
ignore_nonmobile_gaps = TRUE
)
setnames(tenure_data, 'cluster_id', 'person_id')
setnames(tenure_data, 'country_iso_alpha3_code', 'geo_id')
mobility_events <- getMobilityEvents(
tenure_data = tenure_data,
person_var = 'person_id',
geo_var = 'geo_id',
min_year_of_interest = 2009,
max_year_of_interest = 2022,
allowable_duration_temporary_positions = i_range_duration,
allowable_overlap_migration = i_range_overlap
)
library(devtools)
library(roxygen2)
# Initially set up the folder
create('biblio.migration')
setwd('./biblio.migration')
document()
install('biblio.migration')
# For testing
#setwd('./biblio.migration')
#load_all()
library(devtools)
library(roxygen2)
# Initially set up the folder
create('biblio.migration')
setwd('./biblio.migration')
document()
install('biblio.migration')
# For testing
#setwd('./biblio.migration')
#load_all()
library(data.table, warn.conflicts = F, quietly = T)
library(arrow, warn.conflicts = F, quietly = T)
library(tidyr, warn.conflicts = F, quietly = T)
library(dplyr, warn.conflicts = F, quietly = T)
library(stringr, warn.conflicts = F, quietly = T)
library(cluster)
editors <- as.data.table(
open_dataset('../../data/embeddings_for_editors') %>% collect()
)
editors
open_dataset('../../data/paper_details')
# Add in years
editors <- left_join(
editors,
open_dataset('../../data/paper_details') %>% select(ut, pub_year, title) %>% collect(),
by='ut'
)
editors
editors[1, title]
editors[, title]
open_dataset('../../data/paper_details')
editors[948]
editors[948, 3:770]
test <- fread('../../data/specter1_document_embeddings.csv')
test
test[, 3:770]
test[9, 3:770]
library(lsa)
cosine(editors[948, 3:770], test[9, 3:770])
cosine(as.numeric(editors[948, 3:770]), as.numeric(test[9, 3:770]))
cosine(as.numeric(editors[948, 3:770]), as.numeric(test[10, 3:770]))
cosine(as.numeric(editors[949, 3:770]), as.numeric(test[, 3:770]))
cosine(as.numeric(editors[947, 3:770]), as.numeric(test[, 3:770]))
cosine(as.numeric(editors[948, 3:770]), as.numeric(test[, 3:770]))
editors[948, 3:770]
as.numeric(editors[948, 3:770])
as.numeric(test[, 3:770])
cosine(as.numeric(editors[949, 3:770]), as.numeric(test[9, 3:770]))
cosine(as.numeric(editors[948, 3:770]), as.numeric(test[9, 3:770]))
cosine(as.numeric(editors[947, 3:770]), as.numeric(test[9, 3:770]))
cosine(as.numeric(editors[946, 3:770]), as.numeric(test[9, 3:770]))
cosine(as.numeric(editors[945, 3:770]), as.numeric(test[9, 3:770]))
cosine(as.numeric(editors[944, 3:770]), as.numeric(test[9, 3:770]))
cosine(as.numeric(editors[943, 3:770]), as.numeric(test[9, 3:770]))
cosine(as.numeric(editors[942, 3:770]), as.numeric(test[9, 3:770]))
cosine(as.numeric(editors[940, 3:770]), as.numeric(test[9, 3:770]))
test_raw <- editors[, 3:770]
lapply(test_raw, cosine, as.numeric(test[9, 3:770]))
apply(test_raw, 1, cosine, as.numeric(test[9, 3:770]))
hist(apply(test_raw, 1, cosine, as.numeric(test[9, 3:770])))
help(cosine)
cosine(
c(1,2,3,4,5,6,7),
c(1,3,4,5,5,6,7)
)
hist(apply(test_raw, 1, cosine, as.numeric(test[9, 3:770])))
test <- fread('../../data/specter2_document_embeddings.csv')
cosine(as.numeric(editors[940, 3:770]), as.numeric(test[9, 3:770]))
hist(apply(test_raw, 1, cosine, as.numeric(test[9, 3:770])))
test <- fread('../../data/specter_document_embeddings.csv')
test <- fread('../../data/specter1_document_embeddings.csv')
test[9, 3:770]
range(test[9, 3:770])
range(editors[948, 3:770])
range(test[9, 3:770])
range(editors[948, 3:770])
test_raw <- editors[, 3:770]
range(test[9, 3:770])
range(editors[948, 3:770])
range(test[9, 3:770])
editors[1:10, title]
editors[452:463, title]
editors[452:463, unique(title)]
hist(apply(test_raw, 1, cosine, as.numeric(test[9, 3:770])))
test <- fread('../../data/specter2_document_embeddings.csv')
hist(apply(test_raw, 1, cosine, as.numeric(test[9, 3:770])))
library(data.table, warn.conflicts = F, quietly = T)
library(dplyr, warn.conflicts = F, quietly = T)
library(tidyr, warn.conflicts = F, quietly = T)
library(arrow, warn.conflicts = F, quietly = T)
library(biblio.migration, warn.conflicts = F, quietly = T)
source('alternative_migration.R')
raw_data <- as.data.table(
open_dataset('../../data_methods/papers_affiliations') %>%
filter(country_iso_alpha3_code != '') %>%
collect()
)
min_year <- raw_data[, min(pub_year, na.rm=TRUE)]
max_year <- raw_data[, max(pub_year, na.rm=TRUE)]
range_duration_temporary_positions <- 2:5
range_backfill_migration <- 0:2
range_overlap_migration <- 0:3
# For testing
i_range_duration <- 3
i_range_backfill <- 2
i_range_overlap <- 2
estimated_affiliations <- detectAffiliations(
raw_data,
'cluster_id',
'pub_year',
'country_iso_alpha3_code',
backfill_range = i_range_backfill
)
estimated_affiliations <- detectAffiliations(
raw_data,
'cluster_id',
'pub_year',
'country_iso_alpha3_code',
backfill_range = i_range_backfill
)
tenure_data <- getAffiliationTenures(
aff_data = estimated_affiliations,
person_var = 'cluster_id',
time_var = 'pub_year',
geo_var = 'country_iso_alpha3_code'
)
library(devtools)
library(roxygen2)
# Initially set up the folder
create('biblio.migration')
setwd('./biblio.migration')
document()
install('biblio.migration')
# For testing
#setwd('./biblio.migration')
#load_all()
library(data.table, warn.conflicts = F, quietly = T)
library(dplyr, warn.conflicts = F, quietly = T)
library(tidyr, warn.conflicts = F, quietly = T)
library(arrow, warn.conflicts = F, quietly = T)
library(biblio.migration, warn.conflicts = F, quietly = T)
source('alternative_migration.R')
raw_data <- as.data.table(
open_dataset('../../data_methods/papers_affiliations') %>%
filter(country_iso_alpha3_code != '') %>%
collect()
)
min_year <- raw_data[, min(pub_year, na.rm=TRUE)]
max_year <- raw_data[, max(pub_year, na.rm=TRUE)]
range_duration_temporary_positions <- 2:5
range_backfill_migration <- 0:2
range_overlap_migration <- 0:3
# For testing
i_range_duration <- 3
i_range_backfill <- 2
i_range_overlap <- 2
estimated_affiliations <- detectAffiliations(
raw_data,
'cluster_id',
'pub_year',
'country_iso_alpha3_code',
backfill_range = i_range_backfill
)
tenure_data <- getAffiliationTenures(
aff_data = estimated_affiliations,
person_var = 'cluster_id',
time_var = 'pub_year',
geo_var = 'country_iso_alpha3_code'
)
setnames(tenure_data, 'cluster_id', 'person_id')
setnames(tenure_data, 'country_iso_alpha3_code', 'geo_id')
mobility_events <- getMobilityEvents(
tenure_data = tenure_data,
person_var = 'person_id',
geo_var = 'geo_id',
min_year_of_interest = 2009,
max_year_of_interest = 2022,
allowable_duration_temporary_positions = i_range_duration,
allowable_overlap_migration = i_range_overlap
)
traceback()
for(i_range_overlap in range_overlap_migration){
mobility_events <- getMobilityEvents(
tenure_data = tenure_data,
person_var = 'person_id',
geo_var = 'geo_id',
min_year_of_interest = 2009,
max_year_of_interest = 2022,
allowable_duration_temporary_positions = i_range_duration,
allowable_overlap_migration = i_range_overlap
)
# Remove multiple affiliations that already appear in other classifications
mobility_events$multiple_affiliation_tenures <- mobility_events$multiple_affiliation_tenures[
!(
tenure_event_id %in% mobility_events$migration_events$tenure_event_id |
tenure_event_id %in% mobility_events$temporary_events$tenure_event_id |
tenure_event_id %in% mobility_events$censored_career_end$tenure_event_id |
tenure_event_id %in% mobility_events$censored_last_obs$tenure_event_id
)
]
mobility_events$migration_events[, 'max_overlap' := i_range_overlap]
mobility_events$migration_events[, 'max_duration_temporary' := i_range_duration]
mobility_events$migration_events[, 'max_backfill' := i_range_backfill]
mobility_events$return_events[, 'max_overlap' := i_range_overlap]
mobility_events$return_events[, 'max_backfill' := i_range_backfill]
mobility_events$return_events[, 'max_duration_temporary' := i_range_duration]
mobility_events$censored_career_end[, 'max_overlap' := i_range_overlap]
mobility_events$censored_career_end[, 'max_backfill' := i_range_backfill]
mobility_events$censored_career_end[, 'max_duration_temporary' := i_range_duration]
mobility_events$censored_last_obs[, 'max_overlap' := i_range_overlap]
mobility_events$censored_last_obs[, 'max_backfill' := i_range_backfill]
mobility_events$censored_last_obs[, 'max_duration_temporary' := i_range_duration]
mobility_events$temporary_events[, 'max_backfill' := i_range_backfill]
mobility_events$temporary_events[, 'max_duration_temporary' := i_range_duration]
mobility_events$multiple_affiliation_tenures[, 'max_overlap' := i_range_overlap]
mobility_events$multiple_affiliation_tenures[, 'max_backfill' := i_range_backfill]
mobility_events$multiple_affiliation_tenures[, 'max_duration_temporary' := i_range_duration]
if(!exists('all_migration')){
all_migration <- mobility_events$migration_events
} else {
all_migration <- rbind(
all_migration,
mobility_events$migration_events
)
}
if(!exists('all_return')){
all_return <- mobility_events$return_events
} else {
all_return <- rbind(
all_return,
mobility_events$return_events
)
}
if(!exists('all_temporary')){
all_temporary <- mobility_events$temporary_events
} else {
all_temporary <- rbind(
all_temporary,
mobility_events$temporary_events
)
}
if(!exists('all_multiaffs')){
all_multiaffs <- mobility_events$multiple_affiliation_tenures
} else {
all_multiaffs <- rbind(
all_multiaffs,
mobility_events$multiple_affiliation_tenures
)
}
if(!exists('all_censored_lastobs')){
all_censored_lastobs <- mobility_events$censored_last_obs
} else {
all_censored_lastobs <- rbind(
all_censored_lastobs,
mobility_events$censored_last_obs
)
}
if(!exists('all_censored_career_end')){
all_censored_career_end <- mobility_events$censored_career_end
} else {
all_censored_career_end <- rbind(
all_censored_career_end,
mobility_events$censored_career_end
)
}
}
# For testing
i_range_duration <- 3
i_range_backfill <- 2
i_range_overlap <- 2
mobility_events <- getMobilityEvents(
tenure_data = tenure_data,
person_var = 'person_id',
geo_var = 'geo_id',
min_year_of_interest = 2009,
max_year_of_interest = 2022,
allowable_duration_temporary_positions = i_range_duration,
allowable_overlap_migration = i_range_overlap
)
traceback()
library(devtools)
library(roxygen2)
# Initially set up the folder
create('biblio.migration')
setwd('./biblio.migration')
document()
install('biblio.migration')
# For testing
#setwd('./biblio.migration')
#load_all()
library(data.table, warn.conflicts = F, quietly = T)
library(dplyr, warn.conflicts = F, quietly = T)
library(tidyr, warn.conflicts = F, quietly = T)
library(arrow, warn.conflicts = F, quietly = T)
library(biblio.migration, warn.conflicts = F, quietly = T)
source('alternative_migration.R')
raw_data <- as.data.table(
open_dataset('../../data_methods/papers_affiliations') %>%
filter(country_iso_alpha3_code != '') %>%
collect()
)
min_year <- raw_data[, min(pub_year, na.rm=TRUE)]
max_year <- raw_data[, max(pub_year, na.rm=TRUE)]
range_duration_temporary_positions <- 2:5
range_backfill_migration <- 0:2
range_overlap_migration <- 0:3
# For testing
i_range_duration <- 3
i_range_backfill <- 2
i_range_overlap <- 2
estimated_affiliations <- detectAffiliations(
raw_data,
'cluster_id',
'pub_year',
'country_iso_alpha3_code',
backfill_range = i_range_backfill
)
tenure_data <- getAffiliationTenures(
aff_data = estimated_affiliations,
person_var = 'cluster_id',
time_var = 'pub_year',
geo_var = 'country_iso_alpha3_code'
)
setnames(tenure_data, 'cluster_id', 'person_id')
setnames(tenure_data, 'country_iso_alpha3_code', 'geo_id')
mobility_events <- getMobilityEvents(
tenure_data = tenure_data,
person_var = 'person_id',
geo_var = 'geo_id',
min_year_of_interest = 2009,
max_year_of_interest = 2022,
allowable_duration_temporary_positions = i_range_duration,
allowable_overlap_migration = i_range_overlap
)
library(devtools)
library(roxygen2)
# Initially set up the folder
create('biblio.migration')
setwd('./biblio.migration')
document()
install('biblio.migration')
# For testing
#setwd('./biblio.migration')
#load_all()
library(data.table, warn.conflicts = F, quietly = T)
library(dplyr, warn.conflicts = F, quietly = T)
library(tidyr, warn.conflicts = F, quietly = T)
library(arrow, warn.conflicts = F, quietly = T)
library(biblio.migration, warn.conflicts = F, quietly = T)
source('alternative_migration.R')
raw_data <- as.data.table(
open_dataset('../../data_methods/papers_affiliations') %>%
filter(country_iso_alpha3_code != '') %>%
collect()
)
min_year <- raw_data[, min(pub_year, na.rm=TRUE)]
max_year <- raw_data[, max(pub_year, na.rm=TRUE)]
range_duration_temporary_positions <- 2:5
range_backfill_migration <- 0:2
range_overlap_migration <- 0:3
# For testing
i_range_duration <- 3
i_range_backfill <- 2
i_range_overlap <- 2
estimated_affiliations <- detectAffiliations(
raw_data,
'cluster_id',
'pub_year',
'country_iso_alpha3_code',
backfill_range = i_range_backfill
)
tenure_data <- getAffiliationTenures(
aff_data = estimated_affiliations,
person_var = 'cluster_id',
time_var = 'pub_year',
geo_var = 'country_iso_alpha3_code'
)
setnames(tenure_data, 'cluster_id', 'person_id')
setnames(tenure_data, 'country_iso_alpha3_code', 'geo_id')
mobility_events <- getMobilityEvents(
tenure_data = tenure_data,
person_var = 'person_id',
geo_var = 'geo_id',
min_year_of_interest = 2009,
max_year_of_interest = 2022,
allowable_duration_temporary_positions = i_range_duration,
allowable_overlap_migration = i_range_overlap
)
mobility_events$migration_events
mobility_events$migration_events
colnames(mobility_events$migration_events)
help("getMobilityEvents")
colnames(mobility_events$temporary_events)
mobility_events$return_events
mobility_events$ambiguous_simultaneous_starts
mobility_events$multiple_affiliation_tenures
mobility_events$multiple_affiliation_periods
mobility_events$censored_career_end
mobility_events$censored_last_obs
library(devtools)
library(roxygen2)
# Initially set up the folder
create('biblio.migration')
setwd('./biblio.migration')
document()
library(devtools)
library(roxygen2)
# Initially set up the folder
create('biblio.migration')
setwd('./biblio.migration')
document()
install('biblio.migration')
# For testing
#setwd('./biblio.migration')
#load_all()
library(data.table, warn.conflicts = F, quietly = T)
library(dplyr, warn.conflicts = F, quietly = T)
library(tidyr, warn.conflicts = F, quietly = T)
library(arrow, warn.conflicts = F, quietly = T)
library(biblio.migration, warn.conflicts = F, quietly = T)
source('alternative_migration.R')
raw_data <- as.data.table(
open_dataset('../../data_methods/papers_affiliations') %>%
filter(country_iso_alpha3_code != '') %>%
collect()
)
min_year <- raw_data[, min(pub_year, na.rm=TRUE)]
max_year <- raw_data[, max(pub_year, na.rm=TRUE)]
range_duration_temporary_positions <- 2:5
range_backfill_migration <- 0:2
range_overlap_migration <- 0:3
# For testing
i_range_duration <- 3
i_range_backfill <- 2
i_range_overlap <- 2
estimated_affiliations <- detectAffiliations(
raw_data,
'cluster_id',
'pub_year',
'country_iso_alpha3_code',
backfill_range = i_range_backfill
)
tenure_data <- getAffiliationTenures(
aff_data = estimated_affiliations,
person_var = 'cluster_id',
time_var = 'pub_year',
geo_var = 'country_iso_alpha3_code'
)
setnames(tenure_data, 'cluster_id', 'person_id')
setnames(tenure_data, 'country_iso_alpha3_code', 'geo_id')
mobility_events <- getMobilityEvents(
tenure_data = tenure_data,
person_var = 'person_id',
geo_var = 'geo_id',
min_year_of_interest = 2009,
max_year_of_interest = 2022,
allowable_duration_temporary_positions = i_range_duration,
allowable_overlap_migration = i_range_overlap
)
help("getMobilityEvents")
mobility_events$multiple_affiliation_periods
library(devtools)
library(roxygen2)
# Initially set up the folder
create('biblio.migration')
setwd('./biblio.migration')
document()
install('biblio.migration')
build()
build()
getwd()
build()
setwd('biblio.migration')
build()
getwd()
setwd('/biblio.migration')
setwd('biblio.migration')
getwd()
setwd('biblio.migration')
build()
help(build)
getwd()
setwd('Dropbox/research/in_progress/north_south_elites/code_methods/migration_package/biblio.migration')
build()
build()
